import { useFormik } from 'formik'
import { useEffect, useRef, useState } from 'react'
import createRandomSquares from './../utils/utils'
import InputCustom from './../hooks/InputCustom'
import * as yup from 'yup'
import { Nav } from 'react-bootstrap'
import { NavLink } from 'react-router-dom'
import Breadcrumb from './Breadcrumb/Breadcrumb'
import { div } from 'framer-motion/client'
import { bpThresholds } from '../data/bloodpressure.data/bloodpressure.data'


const BloodPressure = () => {
    const [value, setValue] = useState("");
    const [valueBlood, setValueBlood] = useState("");
    const [save, setSave] = useState([]);
    const [history, setHistory] = useState("");
    const [hieuAp, setHieuAp] = useState("");
    const [icon, setIcon] = useState(false);
    const [animate, setAnimate] = useState(false);
    const containerRef = useRef(null); // T·∫°o ref cho div ch·ª©a HTML
    const divRef = useRef(null);

    useEffect(() => {
        if (containerRef.current) {
            containerRef.current.innerHTML = createRandomSquares(15); // Th√™m HTML v√†o DOM
        }
    }, []); // Dependency array r·ªóng -> kh√¥ng ch·∫°y l·∫°i khi nh·∫≠p input

    useEffect(() => {
        const data = JSON.parse(localStorage.getItem('bpValue')) || [];
        setSave(data);

    }, []);

    function getHistory(arrHistory = save) {
        const result = arrHistory.map((item) => {
            let { dayTime, tamThu, tamTruong, nhipTim, chanDoanHuyetAp, chanDoanHieuAp, chanDoanNhipTim } = item
            return (

                <div className='mb-3 mt-3'>
                    <span className='fw-bold'>
                        {`${dayTime}:`}
                    </span>
                    <p>
                        {`T√¢m thu: ${tamThu} | T√¢m tr∆∞∆°ng: ${tamTruong} | NhiÃ£p tim: ${nhipTim}`}
                    </p>
                    <p>
                        {`${chanDoanHuyetAp}`}
                    </p>
                    <p>
                        {`${chanDoanHieuAp}`}
                    </p>
                    <p>
                        {`${chanDoanNhipTim}`}
                    </p>

                </div>
            )

        })
        setHistory(result);
    }

    //Ki·ªÉm tra t√¢m thu v√† t√¢m tr∆∞∆°ng
    function systolicAndDiastolicCheck(systolicReuslt, diastolicResult) {
        if (systolicReuslt === "veryLow" && systolicReuslt === diastolicResult) {
            return "Huy·∫øt √°p hi·ªán ƒëang th·∫•p h∆°n nhi·ªÅu so v·ªõi m·ª©c b√¨nh th∆∞·ªùng, nh∆∞ng ƒë·ª´ng lo l·∫Øng qu√° nh√©. Ch·ªâ c·∫ßn b·∫°n kh√¥ng c√≥ tri·ªáu ch·ª©ng nh∆∞ ch√≥ng m·∫∑t, bu·ªìn n√¥n hay m·ªát m·ªèi th√¨ c·ª© ngh·ªâ ng∆°i v√† theo d√µi th√™m l√† ƒë∆∞·ª£c ƒë√≥.";
        }
        else if (systolicReuslt === "low" && systolicReuslt === diastolicResult) {
            return "Huy·∫øt √°p h∆°i th·∫•p m·ªôt ch√∫t, nh∆∞ng v·∫´n ·ªïn n·∫øu b·∫°n c·∫£m th·∫•y kh·ªèe. H√£y c·ªë g·∫Øng ƒÉn u·ªëng ƒë·∫ßy ƒë·ªß, ng·ªß ngh·ªâ h·ª£p l√Ω v√† theo d√µi th√™m v√†i ng√†y n·ªØa nh√©!";
        }
        else if (systolicReuslt === "normal" && systolicReuslt === diastolicResult) {
            return "üëå Huy·∫øt √°p b·∫°n ƒëang ·ªü m·ª©c l√Ω t∆∞·ªüng r·ªìi ƒë√≥! C·ª© duy tr√¨ sinh ho·∫°t l√†nh m·∫°nh nh∆∞ hi·ªán t·∫°i l√† t·ªët l·∫Øm r·ªìi, tuy·ªát v·ªùi lu√¥n!";
        }

        else if (systolicReuslt === "high" && systolicReuslt === diastolicResult) {
            return "Huy·∫øt √°p ƒëang h∆°i cao h∆°n b√¨nh th∆∞·ªùng m·ªôt ch√∫t. C√≥ th·ªÉ l√† do v·∫≠n ƒë·ªông, ƒÉn m·∫∑n ho·∫∑c cƒÉng th·∫≥ng nh·∫π. B·∫°n ch·ªâ c·∫ßn th∆∞ gi√£n, ƒÉn nh·∫°t h∆°n v√† ngh·ªâ ng∆°i ƒëi·ªÅu ƒë·ªô l√† ·ªïn nha!";
        }
        else if (systolicReuslt === "veryHigh" && systolicReuslt === diastolicResult) {
            return "Huy·∫øt √°p ƒëang cao r√µ r·ªát r·ªìi b·∫°n nh√©. ƒê·ª´ng qu√° lo, nh∆∞ng n√™n theo d√µi th∆∞·ªùng xuy√™n h∆°n, h·∫°n ch·∫ø stress v√† c√≥ th·ªÉ tham kh·∫£o √Ω ki·∫øn b√°c sƒ© n·∫øu t√¨nh tr·∫°ng l·∫∑p l·∫°i ƒë·ªÉ y√™n t√¢m h∆°n ha!";
        }
        else {
            return "Tr∆∞∆°ÃÄng h∆°Ã£p ngoaÃÄi mong ƒë∆°Ã£i cuÃâa huy√™ÃÅt aÃÅp, vui loÃÄng th∆∞Ãâ laÃ£i"
        }
    }

    function systolicCheckOnly(systolicRank, diastolicRank) {
        if (systolicRank === "veryLow" && diastolicRank === "normal") {
            return "T√¢m thu c·ªßa b·∫°n ƒëang th·∫•p h∆°n ƒë√°ng k·ªÉ, nh∆∞ng n·∫øu t√¢m tr∆∞∆°ng v·∫´n b√¨nh th∆∞·ªùng v√† b·∫°n kh√¥ng c√≥ tri·ªáu ch·ª©ng nh∆∞ cho√°ng, m·ªát m·ªèi hay bu·ªìn n√¥n th√¨ c·ª© theo d√µi th√™m nh√©. Ngh·ªâ ng∆°i ƒë·ªß, ƒÉn u·ªëng ƒë·∫ßy ƒë·ªß l√† c∆° th·ªÉ s·∫Ω ph·ª•c h·ªìi th√¥i.";
        }
        else if (systolicRank === "low" && diastolicRank === "normal") {
            return "T√¢m thu h∆°i th·∫•p nh·∫π, c√≥ th·ªÉ do b·∫°n ƒëang ƒë√≥i, thi·∫øu ng·ªß ho·∫∑c m·ªát. N·∫øu b·∫°n v·∫´n th·∫•y kh·ªèe th√¨ kh√¥ng sao ƒë√¢u nha, c·ª© ngh·ªâ ng∆°i ch√∫t r·ªìi ƒëo l·∫°i sau.";
        }
        else if (systolicRank === "high" && diastolicRank === "normal") {
            return "T√¢m thu c·ªßa b·∫°n ƒëang h∆°i cao m·ªôt ch√∫t trong khi t√¢m tr∆∞∆°ng v·∫´n b√¨nh th∆∞·ªùng. ƒêi·ªÅu n√†y c√≥ th·ªÉ do b·∫°n m·ªõi v·∫≠n ƒë·ªông, ƒÉn m·∫∑n ho·∫∑c ƒëang cƒÉng th·∫≥ng nh·∫π. H√≠t th·ªü s√¢u, ngh·ªâ ng∆°i v√† theo d√µi th√™m v√†i l·∫ßn ƒëo n·ªØa l√† ·ªïn nha!";
        }

        else if (systolicRank === "veryHigh" && diastolicRank === "normal") {
            return "T√¢m thu ƒëang cao r√µ r·ªát so v·ªõi b√¨nh th∆∞·ªùng, trong khi t√¢m tr∆∞∆°ng v·∫´n ·ªïn. ƒê√¢y c√≥ th·ªÉ l√† d·∫•u hi·ªáu tƒÉng huy·∫øt √°p t√¢m thu ƒë∆°n ƒë·ªôc - th∆∞·ªùng g·∫∑p ·ªü ng∆∞·ªùi l·ªõn tu·ªïi ho·∫∑c cƒÉng th·∫≥ng k√©o d√†i. B·∫°n n√™n theo d√µi th∆∞·ªùng xuy√™n h∆°n v√† c√¢n nh·∫Øc tham kh·∫£o b√°c sƒ© n·∫øu t√¨nh tr·∫°ng l·∫∑p l·∫°i.";
        }
        else {
            return "Tr∆∞∆°ÃÄng h∆°Ã£p ngoaÃÄi mong ƒë∆°Ã£i cuÃâa huy√™ÃÅt aÃÅp t√¢m thu ƒë∆°n ƒë√¥Ã£c, vui loÃÄng th∆∞Ãâ laÃ£i"
        }
    }

    function diastolicCheckOnly(systolicRank, diastolicRank) {
        if (systolicRank === "normal" && diastolicRank === "veryLow") {
            return "T√¢m tr∆∞∆°ng hi·ªán h∆°i th·∫•p r√µ r·ªát, nh∆∞ng n·∫øu b·∫°n kh√¥ng c√≥ tri·ªáu ch·ª©ng nh∆∞ hoa m·∫Øt, ch√≥ng m·∫∑t th√¨ ch∆∞a c·∫ßn lo l·∫Øng. C√≥ th·ªÉ l√† do m·∫•t n∆∞·ªõc nh·∫π ho·∫∑c m·ªát m·ªèi. C·ª© ngh·ªâ ng∆°i v√† theo d√µi l·∫°i nh√©!";
        }
        else if (systolicRank === "normal" && diastolicRank === "low") {
            return "T√¢m tr∆∞∆°ng h∆°i th·∫•p h∆°n m·ª©c l√Ω t∆∞·ªüng. Vi·ªác n√†y ƒë√¥i khi x·∫£y ra ·ªü ng∆∞·ªùi c√≥ th·ªÉ tr·∫°ng m·∫£nh mai ho·∫∑c do ƒëang ƒë√≥i, thi·∫øu ng·ªß. Ngh·ªâ ng∆°i, u·ªëng ƒë·ªß n∆∞·ªõc l√† ·ªïn b·∫°n nha.";
        }
        else if (systolicRank === "normal" && diastolicRank === "high") {
            return "T√¢m tr∆∞∆°ng c·ªßa b·∫°n h∆°i cao m·ªôt ch√∫t d√π t√¢m thu v·∫´n b√¨nh th∆∞·ªùng. ƒê√¢y c√≥ th·ªÉ l√† ·∫£nh h∆∞·ªüng c·ªßa ch·∫ø ƒë·ªô ƒÉn m·∫∑n, cƒÉng th·∫≥ng nh·∫π ho·∫∑c m·∫•t ng·ªß. Kh√¥ng ƒë√°ng lo n·∫øu ch·ªâ l√† t·∫°m th·ªùi, b·∫°n ch·ªâ c·∫ßn ƒëi·ªÅu ch·ªânh sinh ho·∫°t m·ªôt ch√∫t l√† ·ªïn.";
        }

        else if (systolicRank === "normal" && diastolicRank === "veryHigh") {
            return "T√¢m tr∆∞∆°ng ƒëang cao r√µ r·ªát, c√≥ th·ªÉ l√† d·∫•u hi·ªáu tƒÉng huy·∫øt √°p t√¢m tr∆∞∆°ng ƒë∆°n ƒë·ªôc. N·∫øu b·∫°n c√≥ c·∫£m gi√°c n·∫∑ng ƒë·∫ßu, m·ªát m·ªèi ho·∫∑c kh√≥ ch·ªãu th√¨ n√™n ngh·ªâ ng∆°i, ƒÉn nh·∫°t h∆°n v√† c√¢n nh·∫Øc kh√°m n·∫øu t√¨nh tr·∫°ng l·∫∑p l·∫°i nha.";
        }
        else {
            return "Tr∆∞∆°ÃÄng h∆°Ã£p ngoaÃÄi mong ƒë∆°Ã£i cuÃâa huy√™ÃÅt aÃÅp t√¢m tr∆∞∆°ng ƒë∆°n ƒë√¥Ã£c, vui loÃÄng th∆∞Ãâ laÃ£i"
        }
    }

    function handleMismatchedBP(systolicReuslt, diastolicResult) {
        if (systolicReuslt !== 'normal' && diastolicResult === 'normal') { return systolicCheckOnly(systolicReuslt, diastolicResult) }
        else if (systolicReuslt === 'normal' && diastolicResult !== 'normal') { return diastolicCheckOnly(systolicReuslt, diastolicResult) }
    }



    function getPpLevel(tamThu, tamTruong, ranges) {
        const difference = (tamThu * 1) - (tamTruong * 1);
        for (let range of ranges) {
            if (
                (range.min === undefined || difference >= range.min) &&
                (range.max === undefined || difference < range.max)
            ) {

                return range.label
            }
        }
        return 'unknownPulsePressure';
    }

    function checkPulsePressure(pulsePressureResult) {
        if (pulsePressureResult === "veryLow") {
            return "‚ö†Ô∏è Hi·ªáu √°p hi·ªán h∆°i h·∫πp h∆°n b√¨nh th∆∞·ªùng. ƒêi·ªÅu n√†y ƒë√¥i khi g·∫∑p ·ªü ng∆∞·ªùi huy·∫øt √°p th·∫•p ho·∫∑c th·ªÉ tr·∫°ng g·∫ßy.N·∫øu b·∫°n kh√¥ng th·∫•y ch√≥ng m·∫∑t, m·ªát hay kh√≥ th·ªü th√¨ ch∆∞a c·∫ßn qu√° lo, ch·ªâ c·∫ßn ngh·ªâ ng∆°i ƒë·∫ßy ƒë·ªß v√† theo d√µi th√™m l√† ƒë∆∞·ª£c nha!";
        }
        else if (pulsePressureResult === "low") {
            return "Hi·ªáu √°p h∆°i th·∫•p m·ªôt ch√∫t so v·ªõi m·ª©c l√Ω t∆∞·ªüng. üëâ Kh√¥ng ƒë√°ng lo n·∫øu b·∫°n v·∫´n th·∫•y kh·ªèe. Nh·ªõ u·ªëng ƒë·ªß n∆∞·ªõc, ƒÉn ƒë·∫ßy ƒë·ªß v√† ng·ªß ngh·ªâ ƒë√∫ng gi·ªù b·∫°n nh√©!";
        }
        else if (pulsePressureResult === "normal") {
            return `üëå Hi·ªáu √°p ƒëang ·ªü m·ª©c ho√†n to√†n b√¨nh th∆∞·ªùng. ‚ú® C·ª© duy tr√¨ ch·∫ø ƒë·ªô  sinh ho·∫°t l√†nh m·∫°nh nh∆∞ hi·ªán t·∫°i l√† tuy·ªát v·ªùi r·ªìi ƒë√≥ b·∫°n!`;
        }

        else if (pulsePressureResult === "high") {
            return `üß≠ Hi·ªáu √°p h∆°i r·ªông m·ªôt ch√∫t, nh∆∞ng th∆∞·ªùng l√† do t√¢m tr·∫°ng, v·∫≠n ƒë·ªông, ho·∫∑c thay ƒë·ªïi sinh ho·∫°t t·∫°m th·ªùi.
            üí° B·∫°n c√≥ th·ªÉ th∆∞ gi√£n, ng·ªß s·ªõm h∆°n v√† theo d√µi th√™m v√†i ng√†y t·ªõi l√† ƒë∆∞·ª£c nha, kh√¥ng c·∫ßn lo l·∫Øng qu√° ƒë√¢u!`;
        }
        else if (pulsePressureResult === "veryHigh") {
            return "‚ö†Ô∏è Hi·ªáu √°p ƒëang cao h∆°n b√¨nh th∆∞·ªùng m·ªôt ch√∫t, nh∆∞ng b·∫°n ƒë·ª´ng qu√° lo l·∫Øng nha. M·ªôt s·ªë tr∆∞·ªùng h·ª£p cao tu·ªïi, v·∫≠n ƒë·ªông m·∫°nh ho·∫∑c cƒÉng th·∫≥ng c≈©ng c√≥ th·ªÉ g·∫∑p t√¨nh tr·∫°ng n√†y. ‚ú® H√£y d√†nh th·ªùi gian ngh·ªâ ng∆°i, th∆∞ gi√£n, u·ªëng n∆∞·ªõc ·∫•m v√† theo d√µi l·∫°i trong th·ªùi gian t·ªõi. N·∫øu v·∫´n ti·∫øp di·ªÖn th√¨ tham kh·∫£o √Ω ki·∫øn b√°c sƒ© ƒë·ªÉ y√™n t√¢m h∆°n b·∫°n nh√©!";
        }
        else {
            return "Tr∆∞∆°ÃÄng h∆°Ã£p ngoaÃÄi mong ƒë∆°Ã£i cuÃâa hi√™Ã£u aÃÅp, vui loÃÄng th∆∞Ãâ laÃ£i"
        }
    }


    const rules = bpThresholds["user"]["day"];
    function getBpLevel(inputValue, ranges) {
        for (let range of ranges) {
            if (
                (range.min === undefined || inputValue >= range.min) &&
                (range.max === undefined || inputValue < range.max)
            ) {
                return range.label;
            }
        }
        return 'unknownBP';
    }

    function getHeartRateLevel(heartRate, ranges) {
        for (let range of ranges) {
            if (
                (range.min === undefined || heartRate >= range.min) &&
                (range.max === undefined || heartRate < range.max)
            ) {
                return range.label;
            }
        }
        return 'unknownHeartRate';
    }

    function heartRateCheck(heartRateResult) {
        if (heartRateResult === "low") {
            return "Nh·ªãp tim c·ªßa b·∫°n ƒëang h∆°i ch·∫≠m m·ªôt ch√∫t, nh∆∞ng kh√¥ng sao n·∫øu b·∫°n v·∫´n c·∫£m th·∫•y kh·ªèe m·∫°nh. M·ªôt s·ªë ng∆∞·ªùi t·∫≠p th·ªÉ thao ho·∫∑c ng·ªß ƒë·ªß gi·∫•c c≈©ng th∆∞·ªùng c√≥ nh·ªãp tim th·∫•p m√† kh√¥ng ·∫£nh h∆∞·ªüng g√¨. C·ª© theo d√µi th√™m l√† ƒë∆∞·ª£c nha!";
        }
        else if (heartRateResult === "normal") {
            return "Nh·ªãp tim c·ªßa b·∫°n ƒëang ho√†n to√†n b√¨nh th∆∞·ªùng. C·ª© gi·ªØ v·ªØng l·ªëi s·ªëng l√†nh m·∫°nh nh∆∞ hi·ªán t·∫°i l√† t·ªët l·∫Øm r·ªìi ƒë√≥!";
        }
        else if (heartRateResult === "high") {
            return "Nh·ªãp tim ƒëang h∆°i nhanh m·ªôt ch√∫t, c√≥ th·ªÉ do b·∫°n v·ª´a v·∫≠n ƒë·ªông, lo l·∫Øng ho·∫∑c thi·∫øu ng·ªß. H√£y ngh·ªâ ng∆°i, u·ªëng n∆∞·ªõc ·∫•m v√† theo d√µi l·∫°i sau m·ªôt l√∫c nha. N·∫øu th∆∞·ªùng xuy√™n th·∫•y tim ƒë·∫≠p nhanh, b·∫°n c√≥ th·ªÉ ƒëi ki·ªÉm tra ƒë·ªÉ y√™n t√¢m h∆°n!";
        }
        else {
            return "Tr∆∞∆°ÃÄng h∆°Ã£p ngoaÃÄi mong ƒë∆°Ã£i cuÃâa nhiÃ£p tim, vui loÃÄng th∆∞Ãâ laÃ£i"
        }
    }
    function handleMixedDeviation() {
        return `üìå ƒê√¢y l√† t√¨nh tr·∫°ng huy·∫øt √°p kh√¥ng ·ªïn ƒë·ªãnh. N·∫øu b·∫°n c·∫£m th·∫•y m·ªát m·ªèi, ch√≥ng m·∫∑t, h·ªìi h·ªôp ho·∫∑c b·∫•t th∆∞·ªùng kh√°c, h√£y g·∫∑p nh√¢n vi√™n y t·∫ø ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n.`

    }

    function BloodPressureCheck(inputValue) {
        let { tamTruong, tamThu, nhipTim } = inputValue;
        let str = "";
        const systolicLevel = getBpLevel(tamThu, rules.systolic);
        const diastolicLevel = getBpLevel(tamTruong, rules.diastolic);
        const pulsePressureLevel = getPpLevel(tamThu, tamTruong, rules.difference);
        const pulsePressureNote = checkPulsePressure(pulsePressureLevel);
        const heartRateLevel = getHeartRateLevel(nhipTim, rules.heartRate)
        const hertRateNote = heartRateCheck(heartRateLevel);

        if (systolicLevel === diastolicLevel) {
            // C√πng nh√≥m ‚Üí ch·∫©n ƒëo√°n th·∫≥ng
            str = systolicAndDiastolicCheck(systolicLevel, diastolicLevel);

        } else if ((systolicLevel !== 'normal' && diastolicLevel === 'normal') ||
            (systolicLevel === 'normal' && diastolicLevel !== 'normal')) {
            // Kh√¥ng c√πng nh√≥m ‚Üí c√°c tr∆∞·ªùng h·ª£p c√° bi·ªát
            str = handleMismatchedBP(systolicLevel, diastolicLevel);
        }
        else {
            // Tr∆∞·ªùng h·ª£p l·ªách k√©p ‚Üí Ch·∫©n ƒëo√°n ph·ª©c h·ª£p
            str = handleMixedDeviation();
        }
        setValueBlood(str);
        setHieuAp(pulsePressureNote);
        setValue(hertRateNote);

        setSave(prev => {
            const updated = [...prev, { "dayTime": getDateTime(), "tamThu": tamThu, "tamTruong": tamTruong, "nhipTim": nhipTim, "chanDoanHuyetAp": str, "chanDoanHieuAp": pulsePressureNote, "chanDoanNhipTim": hertRateNote }];
            saveLocalStorage(updated);
            return updated;
        });

    }


    // c√≥ th·ªÉ ghi const formik = useformik ({}) ho·∫∑c b√≥c t√°ch ra lu√¥n ƒë·ªÉ s·ª≠ d·ª•ng c√°c thu·ªôc t√≠nh b√™n trong c·ªßa formik
    //Tr∆∞·ªùng h·ª£p layout ƒë·∫øn t·ª´ b√™n t·ª© 3 (forbite, antDesign) ko c√≥ h·ªó tr·ª£ thu·ªôc t√≠nh nh∆∞ name trong input th√¨ dung setFieldValue ƒë·ªÉ kh·∫Øc ph·ª•c
    const { handleSubmit, handleChange, values, setFieldValue, errors, handleBlur, touched, resetForm } = useFormik({
        initialValues: {
            tamThu: "",
            tamTruong: "",
            nhipTim: ""
        },
        onSubmit: (values) => {
            BloodPressureCheck(values);
            setIcon(true);
            setAnimate(!animate);
            setTimeout(() => {
                setAnimate(false); // th√™m l·∫°i sau 10ms
            }, 1000);
        },
        validationSchema: yup.object({
            tamThu: yup.string().required("Vui l√≤ng kh√¥ng b·ªè tr·ªëng T√¢m Thu").matches(/^(5[1-9]|[6-9][0-9]|1[0-9]{2})$/, "Vui l√≤ng nh·∫≠p s·ªë v√† ph·∫£i h·ª£p l·ªá [51-199]"),
            tamTruong: yup.string().required("Vui l√≤ng kh√¥ng b·ªè tr·ªëng t√¢m tr∆∞∆°ng").matches(/^(?:4[1-9]|[5-9]\d|1[01]\d)$/, "Vui l√≤ng nh·∫≠p s·ªë v√† ph·∫£i h·ª£p l·ªá [41-119]"),
            nhipTim: yup.string().required("Vui l√≤ng kh√¥ng b·ªè tr·ªëng nh·ªãp tim").matches(/^(?:3[1-9]|[4-9]\d|[12]\d{2})$/, "Vui l√≤ng nh·∫≠p s·ªë v√† ph·∫£i h·ª£p l·ªá [31 ƒë·∫øn 299]")
        })
    });

    function saveLocalStorage(data) {

        return localStorage.setItem("bpValue", JSON.stringify(data))
    }

    function getDateTime() {
        const now = new Date(Date.now());

        const day = String(now.getDate()).padStart(2, '0');
        const month = String(now.getMonth() + 1).padStart(2, '0'); // Th√°ng b·∫Øt ƒë·∫ßu t·ª´ 0
        const year = now.getFullYear();

        const hours = String(now.getHours()).padStart(2, '0');
        const minutes = String(now.getMinutes()).padStart(2, '0');
        const seconds = String(now.getSeconds()).padStart(2, '0');

        return `${day}/${month}/${year} ${hours}:${minutes}:${seconds}`;
    }



    return (
        <>
            <Breadcrumb homeUrl={"/"} currentUrl={""} homeContent={"Trang chuÃâ"} currentContent={"Blood Pressure"} bgColor={"rgba(255,255,255,0.3)"} color={"#29274C"} position='absolute' />
            <div className='container-fluid blood-pressure position-relative'>
                <div className="row">
                    <h1 className='fs-10 mb-4 p-2 text-center mt-5 z-2'>Ki·ªÉm tra th√¥ng s·ªë huy·∫øt √°p</h1>
                    <div className='col-xl-5 mx-auto'>
                        <div className='form-container glass-morphism'>
                            <form onSubmit={handleSubmit}>
                                <InputCustom labelContent={"Nh·∫≠p huy·∫øt √°p t√¢m thu"} smallContent={"L√† s·ªë l·ªõn, th∆∞·ªùng n·∫±m tr∆∞·ªõc"} id={"tamThu"} name={"tamThu"} onChange={handleChange} value={values.tamThu} onBlur={handleBlur} error={errors.tamThu} touched={touched.tamThu} />

                                <InputCustom labelContent={"Nh·∫≠p huy·∫øt √°p t√¢m tr∆∞∆°ng"} smallContent={"L√† s·ªë nh·ªè, n·∫±m sau v√† kh√¥ng v∆∞·ª£t qu√° 100"} id={"tamTruong"} name={"tamTruong"} onChange={handleChange} value={values.tamTruong} onBlur={handleBlur} error={errors.tamTruong} touched={touched.tamTruong} />

                                <InputCustom labelContent={"Nh·∫≠p nh·ªãp tim"} smallContent={"Nh·ªãp tim ƒëo ƒë∆∞·ª£c c·ªßa thi·∫øt b·ªã ƒëo"} id={"nhipTim"} name={"nhipTim"} onChange={handleChange} value={values.nhipTim} onBlur={handleBlur} error={errors.nhipTim} touched={touched.nhipTim} />

                                <div className='text-center mb-4 d-flex justify-content-evenly align-items-center gap-2'>
                                    <button type='submit' className='btn btn-outline-dark w-50 d-sm-inline-block mx-sm-2 mb-3'>Ki·ªÉm tra</button>
                                    <button type='button' className='btn btn-outline-light w-50 d-sm-inline-block mb-3' onClick={() => {
                                        resetForm();
                                        setValueBlood("");
                                        setHieuAp("");
                                        setValue("");
                                        setIcon(!icon);
                                    }}>Reset</button>
                                </div>
                                <div className={`myShadow`}>
                                    <h5 className='p-2'>Ch·∫©n ƒëo√°n</h5>
                                    <div className={`pb-5 ${animate && "animate__animated animate__lightSpeedInRight"}`}>
                                        <p className='mb-3'><i className={`${!icon ? "d-none " : "d-block "}fa-solid fa-droplet text-warning fs-3 mx-3`}></i>{valueBlood}</p>
                                        <p className='mb-3'><i className={`${!icon ? "d-none " : "d-block "}fa-solid fa-user text-primary fs-3 mx-3`}></i>{hieuAp}</p>
                                        <p className='mb-3'><i className={`${!icon ? "d-none " : "d-block "}fa-solid fa-heart text-danger fs-4 mx-3`}></i>{value}</p>
                                    </div>
                                </div>
                            </form>
                            <div className={`${save.length > 0 ? "d-flex" : "d-none"} justify-content-center mb-5`}><button className='btn btn-outline-light' onClick={() => { getHistory() }}>Xem laÃ£i liÃ£ch s∆∞Ãâ ƒëo</button></div>
                            <div className='rounded-3 p-2 opacity-75 mb-3'>
                                {history}
                            </div>

                            <div className='note'>
                                <p>*** L∆∞u √Ω: ƒêo t·∫°i nh√† th∆∞·ªùng c√≥ sai s·ªë, n·∫øu k·∫øt qu·∫£ ƒëo b·∫•t th∆∞·ªùng tr√™n 2 l·∫ßn ho·∫∑c huy·∫øt √°p b·∫•t th∆∞·ªùng vui l√≤ng ƒë·∫øn tr·∫°m y t·∫ø ho·∫∑c b·ªánh vi·ªán g·∫ßn nh·∫•t ƒë·ªÉ ƒë∆∞·ª£c thƒÉm kh√°m k·ªãp th·ªùi</p>
                            </div>

                        </div>
                    </div>
                </div>
                <div className='random-square' ref={containerRef}></div>
            </div>
        </>
    )

}
export default BloodPressure